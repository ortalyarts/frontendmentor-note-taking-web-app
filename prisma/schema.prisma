generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String?   // <-- Add this to be compatible with Google
  email     String   @unique
  emailVerified  DateTime? // <-- Add this to be compatible with Google
  image          String?   // <-- Add this to be compatible with Google
  password  String?
  createdAt DateTime @default(now())
  notes     Note[]
  accounts  Account[]
  sessions  Session[]
}

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String?
  userId    String
  tags      String
  archived  Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?     
  token_type        String? 
  scope             String? 
  id_token          String? 
  session_state     String? 
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model playing_with_neon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}
